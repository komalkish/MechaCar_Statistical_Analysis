print(long_table2)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt <- geom_bar()
View(plt)
View(plt)
View(plt)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
> plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
> plt + geom_col() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table> plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
> plt + geom_col() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
mpg_summary<- subset(mpg,manufacturer== "toyota") %% group_by(cyl)%% summarize(Mean_hwy=mean(hwy).groups = 'keep')
> mpg_summary<- subset(mpg,manufacturer== "toyota") %% group_by(cyl)%% summarize(Mean_hwy=mean(hwy), .groups = 'keep')
mpg_summary<- subset(mpg,manufacturer== "toyota") %% group_by(cyl)%% summarize(Mean_hwy=mean(hwy), .groups = 'keep')
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
plt + geom_line()
print(students)
# Part I
students <- c("Alber", "Mira", "Happy", "John", "Komal")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (combinations in class){
print(combinations(sample(33,3))
}
}
# Call the function with the student vector as an argument.
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Create the for loop and print the student name and locker combination.
for (combinations in class){
print(combinations(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (combinations in class){
print(combinations(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (combinations in class){
print(combinations(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
setwd("~/Desktop/Bootcamp/Module 15/Class Activity/15-2-Student_Resources/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
?subset
source("~/Desktop/Bootcamp/Module 15/Class Activity/15-2-Student_Resources/05-Stu_ANOVA/Unsolved/hair_anova_starter.R")
setwd("~/Desktop/Bootcamp/Module 15/Class Activity/15-2-Student_Resources/05-Stu_ANOVA")
# Read in the CSV file.
hair <- read.csv(file="../Resources/hair.csv")
setwd("~/Desktop/Bootcamp/Module 15/Class Activity/15-2-Student_Resources/05-Stu_ANOVA/Unsolved")
# Read in the CSV file.
hair <- read.csv(file="../Resources/hair.csv")
#  Plot the data using ggplot
hair_plot <- ggplot(hair, aes(x=HairColor, y=pain))
hair_plot+geom_boxplot()
View(hair)
#  Plot the data using ggplot
hair_plot <- ggplot(hair, aes(x=HairColour, y=pain))
hair_plot+geom_boxplot()
#  Plot the data using ggplot
hair_plot <- ggplot(hair, aes(x=HairColour, y=Pain))
hair_plot+geom_boxplot()
# Part I
students <- c("Alber", "Mira", "Happy", "John", "Komal")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(student_comb,combinations)
# Call the function with the student vector as an argument.
locker_combinations(combinations)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(combinations)
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(combinations)
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
names_stu <- substr(student,2,2)
# Create an if statement to find the ns of students where the
# second letter that is an "e".
if (names_stu=="e"){
print(student)
student_comb<- sample(33:66,3)
print((student_comb))
}
}
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
names_stu <- substr(student,2,2)
# Create an if statement to find the ns of students where the
# second letter that is an "e".
if (names_stu=="e"){
print(student)
student_comb<- sample(33:66,3)
print(student_comb)
}
}
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
locker_combinations(students)
# Part III
for (student in students){
second_letter <- substr(student,2,2)
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
for (student in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(student)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (student in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(student)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
# Part I
students <- c("Alber", "Mira", "Happy", "John", "Komal")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(student)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (student in students){
second_letter <- substr(student,2,2)
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
for (combination in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(combination)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (combinations in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
# Part I
students <- c("Alber", "Mira", "Happy", "John", "Komal")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (combinations in students){
names_stu <- substr(student,2,2)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (combinations in students){
names_stu <- substr(combinations,2,2)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (combinations in students){
names_stu <- substr(combinations,2,2)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
# Part I
students <- c("Alber", "Mira", "Happy", "John", "Komal")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
# Part II
locker_combinations <- function(class){
for (combinations in class){
student_comb <- sample(33,3)
print(combinations)
print(student_comb)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (combinations in students){
names_stu <- substr(combinations,2,2)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
for (combinations in students){
names_stu <- substr(combinations,4,4)
if (names_stu =='e'){
print(combinations)
student_comb <- sample(33:66,3)
print(student_comb)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
students
setwd("~/Desktop/Bootcamp/Module 15/Class Activity/15-1-Student_Resources/06_Evr_Tibble/Resources")
students <-read_csv("students.csv")
library(tidyverse)
student_file <-read_csv("students.csv")
setwd("~/Desktop/Bootcamp/Module 15/Class Activity/15-1-Student_Resources/06_Evr_Tibble/Resources")
library(tidyverse)
student_file <-read_csv("students.csv")
library("tidyverse")
student<- read.csv("students.csv")
View(student)
head(student)
?unique
unique_ele<- unique(student,school_name= TRUE)
print(unique_ele)
> unique_ele<- unique(student,school_name= FALSE)
unique_ele<- unique(student,school_name= FALSE)
print(unique_ele)
View(unique_ele)
unique_ele<- unique(student,school_name)
unique_ele<- unique(student,incomparables = FALSE)
print(unique_ele)
unique(student$school_name)
unique_ele<- unique(student$school_name)
print(unique_ele)
?length
lenght(unique_ele)
length(unique_ele)
?nrow
nrow(student$student_name)
NROW(student$student_name)
unique(student$student_name)
uni_stu<-unique(student$student_name)
length(uni_stu)
reading_score<- (mean(student$reading_score))
print("The average reading score" reading_score)
print(reading_score)
summarize(student)
passing_math<- student$reading_score>=70%
passing_math<- student$reading_score==70%
mean_reading_score <- summarize(students, mean(reading_score))
mean_reading_score <- summarize(student, mean(reading_score))
print(mean_reading_score)
passing_score<- filter(student,reading_score>=70)
passing_math<- student$reading_score>=70
print(passing_math)
print(passing_score)
passing_math<- student$reading_score
pass<- passing_math>=70
print(pass)
setwd("~/Desktop/Bootcamp/Module 15/Challenges")
library("tidyverse")
mechardata <-read_csv("MecharCar_mpg.csv")
setwd("~/Desktop/Bootcamp/Module 15/Challenges")
setwd("~/Desktop/Bootcamp/Module 15/Challenges")
library("tidyverse")
mechacardata <- read_csv("MechaCar_mpg.csv")
View(mechacardata)
mechampgdf <-data_frame(mechacardata)
mechampgdf <-data.frame(mechacardata)
head(mechampgdf)
mecharegression <-lm(vehicle_lenght ~ AWD, data = mechampgdf)
mecharegression <-lm(vehicle_length ~ AWD, data = mechampgdf)
summary(mecharegression)
print(mecharegression)
mecharegression <-lm(vehicle_length ~ AWD ~ vehicle_weight ~ spoiler_angle ~ mpg, data = mechampgdf)
mecharegression1 <-lm(vehicle_length ~ AWD ~ vehicle_weight ~ spoiler_angle ~ mpg, data = mechampgdf)
mecharegression1 <-lm(vehicle_length ~ AWD ~ vehicle_weight ~ spoiler_angle ~ mpg, data = mechampgdf)
mecharegression <-lm(vehicle_length ~ AWD, data = mechampgdf)
library("lme4")
library(lme4)
library(dplyr)
mecharegression1 <-lm(vehicle_length ~ AWD ~ vehicle_weight ~ spoiler_angle ~ mpg, data = mechampgdf)
mpgreg<- lm(formula=mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechampgdf)
summary(mpgreg)
suspensiondata<- read_csv(Suspension_coil.csv)
suspensiondata<- read_csv(Suspension_Coil.csv)
suspensiondata<- read_csv("Suspension_Coil.csv")
suspensiondf<- data.frame(suspensiondata)
suspensionsummary<- summary.table(suspensiondf)
suspensionsummary<- summarize(suspensiondf)
print(suspensionsummary)
View(suspensionsummary)
total_summary<- summary.data.frame(suspensiondata)
print(total_summary)
summarize(total_summary)
total_summary<- summarize.data.frame(suspensiondata)
total_summary<- summarize(data.frame(suspensiondata))
print(total_summary)
total_summary<- data_frame(suspensiondata)
print(total_summary)
total_summary<- data.frame(suspensiondata)
print(total_summary)
summ<- summarize(total_summary)
print(summ)
total_summary<- summary.data.frame(suspensiondata)
print(total_summary)
df<- data.frame(total_summary)
print(df)
total_summary<- data.frame(suspensiondata)
print(total_summary)
group_by("psi")
group_by(psi)
total_summary <- suspension %>% summarize(Mean_Suspension=mean(PSI), Median_Suspension=median(PSI), Variance_Suspension=var(PSI), STD_Suspension=sd(PSI), .groups = 'keep')
total_summary <- suspensiondata %>% summarize(Mean_suspension=mean(PSI), Median_Suspension=median(PSI), Variance_Suspension=var(PSI), STD_Suspension=sd(PSI), .groups = 'keep')
lot_summary <- suspensiondata %>% group_by(Manufacturing_Lot) %>% summarize(Mean_Suspension=mean(PSI), Median_Suspension=median(PSI), Variance_Suspension=var(PSI), STD_Suspension=sd(PSI), .groups = 'keep')
print(total_summary)
print(lot_summary)
lot_summary <- suspensiondata %>% group_by(Manufacturing_Lot) %>% summarize(Mean_Suspension=mean(PSI), Median_Suspension=median(PSI), Variance_Suspension=var(PSI), STD_Suspension=sd(PSI), .groups = 'keep')
print(total_summary)
print(lot_summary)
t.test(suspensiondata$PSI, mu=1500)
t.test(subset(suspension$PSI, suspension$Manufacturing_Lot == 'Lot1'), mu =1500)
t.test(suspensiondata$PSI, mu=1500)
t.test(subset(suspensiondata$PSI, suspension$Manufacturing_Lot == 'Lot1'), mu =1500)
t.test(suspensiondata$PSI, mu=1500)
t.test(subset(suspensiondata$PSI, suspensiondata$Manufacturing_Lot == 'Lot1'), mu =1500)
t.test(subset(suspensiondata$PSI, suspensiondata$Manufacturing_Lot == 'Lot2'), mu =1500)
t.test(subset(suspensiondata$PSI, suspensiondata$Manufacturing_Lot == 'Lot3'), mu =1500)
model <- lm(mpg ~ vehicle_length,vehicle_weight, spoiler_angle, ground_clearance, AWD,mechampgdf)
View(mechampgdf)
model <- lm(mpg ~ vehicle_length +vehicle_weight+spoiler_angle+ground_clearance+AWD, mechampgdf)
yvals <- model$coefficients['vehicle_weight']*mechampgdf$mpg +
model$coefficients['(Intercept)']
plt <- ggplot(mechampgdf,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2> plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt <- ggplot(mechampgdf,aes(x=mpg,y=vehicle_weight))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt <- ggplot(mechampgdf,aes(x=mpg,y=vehicle_length)) #import dataset into ggplot2> plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
